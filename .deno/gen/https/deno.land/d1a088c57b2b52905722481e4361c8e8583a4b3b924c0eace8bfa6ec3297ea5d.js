import { notImplemented } from "../../_utils.ts";
import randomBytes from "./_randomBytes.ts";
import randomFill, { randomFillSync } from "./_randomFill.ts";
import randomInt from "./_randomInt.ts";
export { default as randomBytes } from "./_randomBytes.ts";
export { default as randomFill, randomFillSync } from "./_randomFill.ts";
export { default as randomInt } from "./_randomInt.ts";
export function checkPrime(_candidate, _options, _callback) {
    notImplemented("crypto.checkPrime");
}
export function checkPrimeSync(_candidate, _options) {
    notImplemented("crypto.checkPrimeSync");
}
export function generatePrime(_size, _options, _callback) {
    notImplemented("crypto.generatePrime");
}
export function generatePrimeSync(_size, _options) {
    notImplemented("crypto.generatePrimeSync");
}
export const randomUUID = () => globalThis.crypto.randomUUID();
export default {
    checkPrime,
    checkPrimeSync,
    generatePrime,
    generatePrimeSync,
    randomUUID,
    randomInt,
    randomBytes,
    randomFill,
    randomFillSync,
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmFuZG9tLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsicmFuZG9tLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUdBLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUNqRCxPQUFPLFdBQVcsTUFBTSxtQkFBbUIsQ0FBQztBQUM1QyxPQUFPLFVBQVUsRUFBRSxFQUFFLGNBQWMsRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBQzlELE9BQU8sU0FBUyxNQUFNLGlCQUFpQixDQUFDO0FBRXhDLE9BQU8sRUFBRSxPQUFPLElBQUksV0FBVyxFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFDM0QsT0FBTyxFQUFFLE9BQU8sSUFBSSxVQUFVLEVBQUUsY0FBYyxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFDekUsT0FBTyxFQUFFLE9BQU8sSUFBSSxTQUFTLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQTZCdkQsTUFBTSxVQUFVLFVBQVUsQ0FDeEIsVUFBMkIsRUFDM0IsUUFBNkUsRUFDN0UsU0FBd0Q7SUFFeEQsY0FBYyxDQUFDLG1CQUFtQixDQUFDLENBQUM7QUFDdEMsQ0FBQztBQUVELE1BQU0sVUFBVSxjQUFjLENBQzVCLFVBQTJCLEVBQzNCLFFBQTRCO0lBRTVCLGNBQWMsQ0FBQyx1QkFBdUIsQ0FBQyxDQUFDO0FBQzFDLENBQUM7QUF1Q0QsTUFBTSxVQUFVLGFBQWEsQ0FDM0IsS0FBYSxFQUNiLFFBQWtCLEVBQ2xCLFNBQW1CO0lBRW5CLGNBQWMsQ0FBQyxzQkFBc0IsQ0FBQyxDQUFDO0FBQ3pDLENBQUM7QUFlRCxNQUFNLFVBQVUsaUJBQWlCLENBQy9CLEtBQWEsRUFDYixRQUd3QjtJQUV4QixjQUFjLENBQUMsMEJBQTBCLENBQUMsQ0FBQztBQUM3QyxDQUFDO0FBRUQsTUFBTSxDQUFDLE1BQU0sVUFBVSxHQUFHLEdBQUcsRUFBRSxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsVUFBVSxFQUFFLENBQUM7QUFFL0QsZUFBZTtJQUNiLFVBQVU7SUFDVixjQUFjO0lBQ2QsYUFBYTtJQUNiLGlCQUFpQjtJQUNqQixVQUFVO0lBQ1YsU0FBUztJQUNULFdBQVc7SUFDWCxVQUFVO0lBQ1YsY0FBYztDQUNmLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxOC0yMDIyIHRoZSBEZW5vIGF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuIE1JVCBsaWNlbnNlLlxuLy8gQ29weXJpZ2h0IEpveWVudCwgSW5jLiBhbmQgTm9kZS5qcyBjb250cmlidXRvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuIE1JVCBsaWNlbnNlLlxuXG5pbXBvcnQgeyBub3RJbXBsZW1lbnRlZCB9IGZyb20gXCIuLi8uLi9fdXRpbHMudHNcIjtcbmltcG9ydCByYW5kb21CeXRlcyBmcm9tIFwiLi9fcmFuZG9tQnl0ZXMudHNcIjtcbmltcG9ydCByYW5kb21GaWxsLCB7IHJhbmRvbUZpbGxTeW5jIH0gZnJvbSBcIi4vX3JhbmRvbUZpbGwudHNcIjtcbmltcG9ydCByYW5kb21JbnQgZnJvbSBcIi4vX3JhbmRvbUludC50c1wiO1xuXG5leHBvcnQgeyBkZWZhdWx0IGFzIHJhbmRvbUJ5dGVzIH0gZnJvbSBcIi4vX3JhbmRvbUJ5dGVzLnRzXCI7XG5leHBvcnQgeyBkZWZhdWx0IGFzIHJhbmRvbUZpbGwsIHJhbmRvbUZpbGxTeW5jIH0gZnJvbSBcIi4vX3JhbmRvbUZpbGwudHNcIjtcbmV4cG9ydCB7IGRlZmF1bHQgYXMgcmFuZG9tSW50IH0gZnJvbSBcIi4vX3JhbmRvbUludC50c1wiO1xuXG5leHBvcnQgdHlwZSBMYXJnZU51bWJlckxpa2UgPVxuICB8IEFycmF5QnVmZmVyVmlld1xuICB8IFNoYXJlZEFycmF5QnVmZmVyXG4gIHwgQXJyYXlCdWZmZXJcbiAgfCBiaWdpbnQ7XG5cbmV4cG9ydCBpbnRlcmZhY2UgQ2hlY2tQcmltZU9wdGlvbnMge1xuICAvKipcbiAgICogVGhlIG51bWJlciBvZiBNaWxsZXItUmFiaW4gcHJvYmFiaWxpc3RpYyBwcmltYWxpdHkgaXRlcmF0aW9ucyB0byBwZXJmb3JtLlxuICAgKiBXaGVuIHRoZSB2YWx1ZSBpcyAwICh6ZXJvKSwgYSBudW1iZXIgb2YgY2hlY2tzIGlzIHVzZWQgdGhhdCB5aWVsZHMgYSBmYWxzZSBwb3NpdGl2ZSByYXRlIG9mIGF0IG1vc3QgMi02NCBmb3IgcmFuZG9tIGlucHV0LlxuICAgKiBDYXJlIG11c3QgYmUgdXNlZCB3aGVuIHNlbGVjdGluZyBhIG51bWJlciBvZiBjaGVja3MuXG4gICAqIFJlZmVyIHRvIHRoZSBPcGVuU1NMIGRvY3VtZW50YXRpb24gZm9yIHRoZSBCTl9pc19wcmltZV9leCBmdW5jdGlvbiBuY2hlY2tzIG9wdGlvbnMgZm9yIG1vcmUgZGV0YWlscy5cbiAgICpcbiAgICogQGRlZmF1bHQgMFxuICAgKi9cbiAgY2hlY2tzPzogbnVtYmVyIHwgdW5kZWZpbmVkO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY2hlY2tQcmltZShcbiAgY2FuZGlkYXRlOiBMYXJnZU51bWJlckxpa2UsXG4gIGNhbGxiYWNrOiAoZXJyOiBFcnJvciB8IG51bGwsIHJlc3VsdDogYm9vbGVhbikgPT4gdm9pZCxcbik6IHZvaWQ7XG5leHBvcnQgZnVuY3Rpb24gY2hlY2tQcmltZShcbiAgY2FuZGlkYXRlOiBMYXJnZU51bWJlckxpa2UsXG4gIG9wdGlvbnM6IENoZWNrUHJpbWVPcHRpb25zLFxuICBjYWxsYmFjazogKGVycjogRXJyb3IgfCBudWxsLCByZXN1bHQ6IGJvb2xlYW4pID0+IHZvaWQsXG4pOiB2b2lkO1xuZXhwb3J0IGZ1bmN0aW9uIGNoZWNrUHJpbWUoXG4gIF9jYW5kaWRhdGU6IExhcmdlTnVtYmVyTGlrZSxcbiAgX29wdGlvbnM/OiBDaGVja1ByaW1lT3B0aW9ucyB8ICgoZXJyOiBFcnJvciB8IG51bGwsIHJlc3VsdDogYm9vbGVhbikgPT4gdm9pZCksXG4gIF9jYWxsYmFjaz86IChlcnI6IEVycm9yIHwgbnVsbCwgcmVzdWx0OiBib29sZWFuKSA9PiB2b2lkLFxuKSB7XG4gIG5vdEltcGxlbWVudGVkKFwiY3J5cHRvLmNoZWNrUHJpbWVcIik7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjaGVja1ByaW1lU3luYyhcbiAgX2NhbmRpZGF0ZTogTGFyZ2VOdW1iZXJMaWtlLFxuICBfb3B0aW9ucz86IENoZWNrUHJpbWVPcHRpb25zLFxuKTogYm9vbGVhbiB7XG4gIG5vdEltcGxlbWVudGVkKFwiY3J5cHRvLmNoZWNrUHJpbWVTeW5jXCIpO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEdlbmVyYXRlUHJpbWVPcHRpb25zIHtcbiAgYWRkPzogTGFyZ2VOdW1iZXJMaWtlIHwgdW5kZWZpbmVkO1xuICByZW0/OiBMYXJnZU51bWJlckxpa2UgfCB1bmRlZmluZWQ7XG4gIC8qKlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgc2FmZT86IGJvb2xlYW4gfCB1bmRlZmluZWQ7XG4gIGJpZ2ludD86IGJvb2xlYW4gfCB1bmRlZmluZWQ7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgR2VuZXJhdGVQcmltZU9wdGlvbnNCaWdJbnQgZXh0ZW5kcyBHZW5lcmF0ZVByaW1lT3B0aW9ucyB7XG4gIGJpZ2ludDogdHJ1ZTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBHZW5lcmF0ZVByaW1lT3B0aW9uc0FycmF5QnVmZmVyIGV4dGVuZHMgR2VuZXJhdGVQcmltZU9wdGlvbnMge1xuICBiaWdpbnQ/OiBmYWxzZSB8IHVuZGVmaW5lZDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdlbmVyYXRlUHJpbWUoXG4gIHNpemU6IG51bWJlcixcbiAgY2FsbGJhY2s6IChlcnI6IEVycm9yIHwgbnVsbCwgcHJpbWU6IEFycmF5QnVmZmVyKSA9PiB2b2lkLFxuKTogdm9pZDtcbmV4cG9ydCBmdW5jdGlvbiBnZW5lcmF0ZVByaW1lKFxuICBzaXplOiBudW1iZXIsXG4gIG9wdGlvbnM6IEdlbmVyYXRlUHJpbWVPcHRpb25zQmlnSW50LFxuICBjYWxsYmFjazogKGVycjogRXJyb3IgfCBudWxsLCBwcmltZTogYmlnaW50KSA9PiB2b2lkLFxuKTogdm9pZDtcbmV4cG9ydCBmdW5jdGlvbiBnZW5lcmF0ZVByaW1lKFxuICBzaXplOiBudW1iZXIsXG4gIG9wdGlvbnM6IEdlbmVyYXRlUHJpbWVPcHRpb25zQXJyYXlCdWZmZXIsXG4gIGNhbGxiYWNrOiAoZXJyOiBFcnJvciB8IG51bGwsIHByaW1lOiBBcnJheUJ1ZmZlcikgPT4gdm9pZCxcbik6IHZvaWQ7XG5leHBvcnQgZnVuY3Rpb24gZ2VuZXJhdGVQcmltZShcbiAgc2l6ZTogbnVtYmVyLFxuICBvcHRpb25zOiBHZW5lcmF0ZVByaW1lT3B0aW9ucyxcbiAgY2FsbGJhY2s6IChlcnI6IEVycm9yIHwgbnVsbCwgcHJpbWU6IEFycmF5QnVmZmVyIHwgYmlnaW50KSA9PiB2b2lkLFxuKTogdm9pZDtcbmV4cG9ydCBmdW5jdGlvbiBnZW5lcmF0ZVByaW1lKFxuICBfc2l6ZTogbnVtYmVyLFxuICBfb3B0aW9ucz86IHVua25vd24sXG4gIF9jYWxsYmFjaz86IHVua25vd24sXG4pIHtcbiAgbm90SW1wbGVtZW50ZWQoXCJjcnlwdG8uZ2VuZXJhdGVQcmltZVwiKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdlbmVyYXRlUHJpbWVTeW5jKHNpemU6IG51bWJlcik6IEFycmF5QnVmZmVyO1xuZXhwb3J0IGZ1bmN0aW9uIGdlbmVyYXRlUHJpbWVTeW5jKFxuICBzaXplOiBudW1iZXIsXG4gIG9wdGlvbnM6IEdlbmVyYXRlUHJpbWVPcHRpb25zQmlnSW50LFxuKTogYmlnaW50O1xuZXhwb3J0IGZ1bmN0aW9uIGdlbmVyYXRlUHJpbWVTeW5jKFxuICBzaXplOiBudW1iZXIsXG4gIG9wdGlvbnM6IEdlbmVyYXRlUHJpbWVPcHRpb25zQXJyYXlCdWZmZXIsXG4pOiBBcnJheUJ1ZmZlcjtcbmV4cG9ydCBmdW5jdGlvbiBnZW5lcmF0ZVByaW1lU3luYyhcbiAgc2l6ZTogbnVtYmVyLFxuICBvcHRpb25zOiBHZW5lcmF0ZVByaW1lT3B0aW9ucyxcbik6IEFycmF5QnVmZmVyIHwgYmlnaW50O1xuZXhwb3J0IGZ1bmN0aW9uIGdlbmVyYXRlUHJpbWVTeW5jKFxuICBfc2l6ZTogbnVtYmVyLFxuICBfb3B0aW9ucz86XG4gICAgfCBHZW5lcmF0ZVByaW1lT3B0aW9uc0JpZ0ludFxuICAgIHwgR2VuZXJhdGVQcmltZU9wdGlvbnNBcnJheUJ1ZmZlclxuICAgIHwgR2VuZXJhdGVQcmltZU9wdGlvbnMsXG4pOiBBcnJheUJ1ZmZlciB8IGJpZ2ludCB7XG4gIG5vdEltcGxlbWVudGVkKFwiY3J5cHRvLmdlbmVyYXRlUHJpbWVTeW5jXCIpO1xufVxuXG5leHBvcnQgY29uc3QgcmFuZG9tVVVJRCA9ICgpID0+IGdsb2JhbFRoaXMuY3J5cHRvLnJhbmRvbVVVSUQoKTtcblxuZXhwb3J0IGRlZmF1bHQge1xuICBjaGVja1ByaW1lLFxuICBjaGVja1ByaW1lU3luYyxcbiAgZ2VuZXJhdGVQcmltZSxcbiAgZ2VuZXJhdGVQcmltZVN5bmMsXG4gIHJhbmRvbVVVSUQsXG4gIHJhbmRvbUludCxcbiAgcmFuZG9tQnl0ZXMsXG4gIHJhbmRvbUZpbGwsXG4gIHJhbmRvbUZpbGxTeW5jLFxufTtcbiJdfQ==