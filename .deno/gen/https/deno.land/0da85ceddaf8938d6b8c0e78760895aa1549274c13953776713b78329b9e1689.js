import { notImplemented } from "../../_utils.ts";
export function generateKey(_type, _options, _callback) {
    notImplemented("crypto.generateKey");
}
export function generateKeyPair(_type, _options, _callback) {
    notImplemented("crypto.generateKeyPair");
}
export function generateKeyPairSync(_type, _options) {
    notImplemented("crypto.generateKeyPairSync");
}
export function generateKeySync(_type, _options) {
    notImplemented("crypto.generateKeySync");
}
export default {
    generateKey,
    generateKeySync,
    generateKeyPair,
    generateKeyPairSync,
};
//# sourceMappingURL=data:application/json;base64,