import { digestAlgorithms } from "../../../crypto/_wasm_crypto/mod.ts";
import { getCiphers } from "../../_crypto/crypto_browserify/browserify_aes/mod.js";
import { notImplemented } from "../../_utils.ts";
import { Buffer } from "../../buffer.ts";
import { ERR_INVALID_ARG_TYPE, hideStackFrames } from "../errors.ts";
import { isAnyArrayBuffer, isArrayBufferView } from "../util/types.ts";
import { kHandle, kKeyObject } from "./constants.ts";
let defaultEncoding = "buffer";
export function setDefaultEncoding(val) {
    defaultEncoding = val;
}
export function getDefaultEncoding() {
    return defaultEncoding;
}
export function toBuf(val, encoding) {
    if (typeof val === "string") {
        if (encoding === "buffer") {
            encoding = "utf8";
        }
        return Buffer.from(val, encoding);
    }
    return val;
}
export const validateByteSource = hideStackFrames((val, name) => {
    val = toBuf(val);
    if (isAnyArrayBuffer(val) || isArrayBufferView(val)) {
        return;
    }
    throw new ERR_INVALID_ARG_TYPE(name, ["string", "ArrayBuffer", "TypedArray", "DataView", "Buffer"], val);
});
export function getHashes() {
    return digestAlgorithms;
}
export function getCurves() {
    notImplemented("crypto.getCurves");
}
export function secureHeapUsed() {
    notImplemented("crypto.secureHeapUsed");
}
export function setEngine(_engine, _flags) {
    notImplemented("crypto.setEngine");
}
export { getCiphers, kHandle, kKeyObject };
export default {
    getDefaultEncoding,
    getHashes,
    setDefaultEncoding,
    getCiphers,
    getCurves,
    secureHeapUsed,
    setEngine,
    validateByteSource,
    toBuf,
    kHandle,
    kKeyObject,
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInV0aWwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBR0EsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0scUNBQXFDLENBQUM7QUFDdkUsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLHVEQUF1RCxDQUFDO0FBQ25GLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUNqRCxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDekMsT0FBTyxFQUFFLG9CQUFvQixFQUFFLGVBQWUsRUFBRSxNQUFNLGNBQWMsQ0FBQztBQUNyRSxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUV2RSxPQUFPLEVBQUUsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBRXJELElBQUksZUFBZSxHQUFHLFFBQVEsQ0FBQztBQUUvQixNQUFNLFVBQVUsa0JBQWtCLENBQUMsR0FBVztJQUM1QyxlQUFlLEdBQUcsR0FBRyxDQUFDO0FBQ3hCLENBQUM7QUFFRCxNQUFNLFVBQVUsa0JBQWtCO0lBQ2hDLE9BQU8sZUFBZSxDQUFDO0FBQ3pCLENBQUM7QUFLRCxNQUFNLFVBQVUsS0FBSyxDQUFDLEdBQW9CLEVBQUUsUUFBaUI7SUFDM0QsSUFBSSxPQUFPLEdBQUcsS0FBSyxRQUFRLEVBQUU7UUFDM0IsSUFBSSxRQUFRLEtBQUssUUFBUSxFQUFFO1lBQ3pCLFFBQVEsR0FBRyxNQUFNLENBQUM7U0FDbkI7UUFFRCxPQUFPLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLFFBQVEsQ0FBQyxDQUFDO0tBQ25DO0lBRUQsT0FBTyxHQUFHLENBQUM7QUFDYixDQUFDO0FBRUQsTUFBTSxDQUFDLE1BQU0sa0JBQWtCLEdBQUcsZUFBZSxDQUFDLENBQUMsR0FBRyxFQUFFLElBQUksRUFBRSxFQUFFO0lBQzlELEdBQUcsR0FBRyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7SUFFakIsSUFBSSxnQkFBZ0IsQ0FBQyxHQUFHLENBQUMsSUFBSSxpQkFBaUIsQ0FBQyxHQUFHLENBQUMsRUFBRTtRQUNuRCxPQUFPO0tBQ1I7SUFFRCxNQUFNLElBQUksb0JBQW9CLENBQzVCLElBQUksRUFDSixDQUFDLFFBQVEsRUFBRSxhQUFhLEVBQUUsWUFBWSxFQUFFLFVBQVUsRUFBRSxRQUFRLENBQUMsRUFDN0QsR0FBRyxDQUNKLENBQUM7QUFDSixDQUFDLENBQUMsQ0FBQztBQUtILE1BQU0sVUFBVSxTQUFTO0lBQ3ZCLE9BQU8sZ0JBQWdCLENBQUM7QUFDMUIsQ0FBQztBQUVELE1BQU0sVUFBVSxTQUFTO0lBQ3ZCLGNBQWMsQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO0FBQ3JDLENBQUM7QUFTRCxNQUFNLFVBQVUsY0FBYztJQUM1QixjQUFjLENBQUMsdUJBQXVCLENBQUMsQ0FBQztBQUMxQyxDQUFDO0FBRUQsTUFBTSxVQUFVLFNBQVMsQ0FBQyxPQUFlLEVBQUUsTUFBd0I7SUFDakUsY0FBYyxDQUFDLGtCQUFrQixDQUFDLENBQUM7QUFDckMsQ0FBQztBQUVELE9BQU8sRUFBRSxVQUFVLEVBQUUsT0FBTyxFQUFFLFVBQVUsRUFBRSxDQUFDO0FBRTNDLGVBQWU7SUFDYixrQkFBa0I7SUFDbEIsU0FBUztJQUNULGtCQUFrQjtJQUNsQixVQUFVO0lBQ1YsU0FBUztJQUNULGNBQWM7SUFDZCxTQUFTO0lBQ1Qsa0JBQWtCO0lBQ2xCLEtBQUs7SUFDTCxPQUFPO0lBQ1AsVUFBVTtDQUNYLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxOC0yMDIyIHRoZSBEZW5vIGF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuIE1JVCBsaWNlbnNlLlxuLy8gQ29weXJpZ2h0IEpveWVudCwgSW5jLiBhbmQgTm9kZS5qcyBjb250cmlidXRvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuIE1JVCBsaWNlbnNlLlxuXG5pbXBvcnQgeyBkaWdlc3RBbGdvcml0aG1zIH0gZnJvbSBcIi4uLy4uLy4uL2NyeXB0by9fd2FzbV9jcnlwdG8vbW9kLnRzXCI7XG5pbXBvcnQgeyBnZXRDaXBoZXJzIH0gZnJvbSBcIi4uLy4uL19jcnlwdG8vY3J5cHRvX2Jyb3dzZXJpZnkvYnJvd3NlcmlmeV9hZXMvbW9kLmpzXCI7XG5pbXBvcnQgeyBub3RJbXBsZW1lbnRlZCB9IGZyb20gXCIuLi8uLi9fdXRpbHMudHNcIjtcbmltcG9ydCB7IEJ1ZmZlciB9IGZyb20gXCIuLi8uLi9idWZmZXIudHNcIjtcbmltcG9ydCB7IEVSUl9JTlZBTElEX0FSR19UWVBFLCBoaWRlU3RhY2tGcmFtZXMgfSBmcm9tIFwiLi4vZXJyb3JzLnRzXCI7XG5pbXBvcnQgeyBpc0FueUFycmF5QnVmZmVyLCBpc0FycmF5QnVmZmVyVmlldyB9IGZyb20gXCIuLi91dGlsL3R5cGVzLnRzXCI7XG5pbXBvcnQgeyBjcnlwdG8gYXMgY29uc3RhbnRzIH0gZnJvbSBcIi4uLy4uL2ludGVybmFsX2JpbmRpbmcvY29uc3RhbnRzLnRzXCI7XG5pbXBvcnQgeyBrSGFuZGxlLCBrS2V5T2JqZWN0IH0gZnJvbSBcIi4vY29uc3RhbnRzLnRzXCI7XG5cbmxldCBkZWZhdWx0RW5jb2RpbmcgPSBcImJ1ZmZlclwiO1xuXG5leHBvcnQgZnVuY3Rpb24gc2V0RGVmYXVsdEVuY29kaW5nKHZhbDogc3RyaW5nKSB7XG4gIGRlZmF1bHRFbmNvZGluZyA9IHZhbDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldERlZmF1bHRFbmNvZGluZygpOiBzdHJpbmcge1xuICByZXR1cm4gZGVmYXVsdEVuY29kaW5nO1xufVxuXG4vLyBUaGlzIGlzIGhlcmUgYmVjYXVzZSBtYW55IGZ1bmN0aW9ucyBhY2NlcHRlZCBiaW5hcnkgc3RyaW5ncyB3aXRob3V0XG4vLyBhbnkgZXhwbGljaXQgZW5jb2RpbmcgaW4gb2xkZXIgdmVyc2lvbnMgb2Ygbm9kZSwgYW5kIHdlIGRvbid0IHdhbnRcbi8vIHRvIGJyZWFrIHRoZW0gdW5uZWNlc3NhcmlseS5cbmV4cG9ydCBmdW5jdGlvbiB0b0J1Zih2YWw6IHN0cmluZyB8IEJ1ZmZlciwgZW5jb2Rpbmc/OiBzdHJpbmcpOiBCdWZmZXIge1xuICBpZiAodHlwZW9mIHZhbCA9PT0gXCJzdHJpbmdcIikge1xuICAgIGlmIChlbmNvZGluZyA9PT0gXCJidWZmZXJcIikge1xuICAgICAgZW5jb2RpbmcgPSBcInV0ZjhcIjtcbiAgICB9XG5cbiAgICByZXR1cm4gQnVmZmVyLmZyb20odmFsLCBlbmNvZGluZyk7XG4gIH1cblxuICByZXR1cm4gdmFsO1xufVxuXG5leHBvcnQgY29uc3QgdmFsaWRhdGVCeXRlU291cmNlID0gaGlkZVN0YWNrRnJhbWVzKCh2YWwsIG5hbWUpID0+IHtcbiAgdmFsID0gdG9CdWYodmFsKTtcblxuICBpZiAoaXNBbnlBcnJheUJ1ZmZlcih2YWwpIHx8IGlzQXJyYXlCdWZmZXJWaWV3KHZhbCkpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICB0aHJvdyBuZXcgRVJSX0lOVkFMSURfQVJHX1RZUEUoXG4gICAgbmFtZSxcbiAgICBbXCJzdHJpbmdcIiwgXCJBcnJheUJ1ZmZlclwiLCBcIlR5cGVkQXJyYXlcIiwgXCJEYXRhVmlld1wiLCBcIkJ1ZmZlclwiXSxcbiAgICB2YWwsXG4gICk7XG59KTtcblxuLyoqXG4gKiBSZXR1cm5zIGFuIGFycmF5IG9mIHRoZSBuYW1lcyBvZiB0aGUgc3VwcG9ydGVkIGhhc2ggYWxnb3JpdGhtcywgc3VjaCBhcyAnc2hhMScuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRIYXNoZXMoKTogcmVhZG9ubHkgc3RyaW5nW10ge1xuICByZXR1cm4gZGlnZXN0QWxnb3JpdGhtcztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldEN1cnZlcygpOiByZWFkb25seSBzdHJpbmdbXSB7XG4gIG5vdEltcGxlbWVudGVkKFwiY3J5cHRvLmdldEN1cnZlc1wiKTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBTZWN1cmVIZWFwVXNhZ2Uge1xuICB0b3RhbDogbnVtYmVyO1xuICBtaW46IG51bWJlcjtcbiAgdXNlZDogbnVtYmVyO1xuICB1dGlsaXphdGlvbjogbnVtYmVyO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc2VjdXJlSGVhcFVzZWQoKTogU2VjdXJlSGVhcFVzYWdlIHtcbiAgbm90SW1wbGVtZW50ZWQoXCJjcnlwdG8uc2VjdXJlSGVhcFVzZWRcIik7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzZXRFbmdpbmUoX2VuZ2luZTogc3RyaW5nLCBfZmxhZ3M6IHR5cGVvZiBjb25zdGFudHMpIHtcbiAgbm90SW1wbGVtZW50ZWQoXCJjcnlwdG8uc2V0RW5naW5lXCIpO1xufVxuXG5leHBvcnQgeyBnZXRDaXBoZXJzLCBrSGFuZGxlLCBrS2V5T2JqZWN0IH07XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgZ2V0RGVmYXVsdEVuY29kaW5nLFxuICBnZXRIYXNoZXMsXG4gIHNldERlZmF1bHRFbmNvZGluZyxcbiAgZ2V0Q2lwaGVycyxcbiAgZ2V0Q3VydmVzLFxuICBzZWN1cmVIZWFwVXNlZCxcbiAgc2V0RW5naW5lLFxuICB2YWxpZGF0ZUJ5dGVTb3VyY2UsXG4gIHRvQnVmLFxuICBrSGFuZGxlLFxuICBrS2V5T2JqZWN0LFxufTtcbiJdfQ==