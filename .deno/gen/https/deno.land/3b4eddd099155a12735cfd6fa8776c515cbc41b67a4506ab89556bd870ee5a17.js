import { Buffer } from "../../buffer.ts";
export const MAX_RANDOM_VALUES = 65536;
export const MAX_SIZE = 4294967295;
function generateRandomBytes(size) {
    if (size > MAX_SIZE) {
        throw new RangeError(`The value of "size" is out of range. It must be >= 0 && <= ${MAX_SIZE}. Received ${size}`);
    }
    const bytes = Buffer.allocUnsafe(size);
    if (size > MAX_RANDOM_VALUES) {
        for (let generated = 0; generated < size; generated += MAX_RANDOM_VALUES) {
            globalThis.crypto.getRandomValues(bytes.slice(generated, generated + MAX_RANDOM_VALUES));
        }
    }
    else {
        globalThis.crypto.getRandomValues(bytes);
    }
    return bytes;
}
export default function randomBytes(size, cb) {
    if (typeof cb === "function") {
        let err = null, bytes;
        try {
            bytes = generateRandomBytes(size);
        }
        catch (e) {
            if (e instanceof RangeError &&
                e.message.includes('The value of "size" is out of range')) {
                throw e;
            }
            else if (e instanceof Error) {
                err = e;
            }
            else {
                err = new Error("[non-error thrown]");
            }
        }
        setTimeout(() => {
            if (err) {
                cb(err);
            }
            else {
                cb(null, bytes);
            }
        }, 0);
    }
    else {
        return generateRandomBytes(size);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX3JhbmRvbUJ5dGVzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiX3JhbmRvbUJ5dGVzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUV6QyxNQUFNLENBQUMsTUFBTSxpQkFBaUIsR0FBRyxLQUFLLENBQUM7QUFDdkMsTUFBTSxDQUFDLE1BQU0sUUFBUSxHQUFHLFVBQVUsQ0FBQztBQUVuQyxTQUFTLG1CQUFtQixDQUFDLElBQVk7SUFDdkMsSUFBSSxJQUFJLEdBQUcsUUFBUSxFQUFFO1FBQ25CLE1BQU0sSUFBSSxVQUFVLENBQ2xCLDhEQUE4RCxRQUFRLGNBQWMsSUFBSSxFQUFFLENBQzNGLENBQUM7S0FDSDtJQUVELE1BQU0sS0FBSyxHQUFHLE1BQU0sQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLENBQUM7SUFHdkMsSUFBSSxJQUFJLEdBQUcsaUJBQWlCLEVBQUU7UUFDNUIsS0FBSyxJQUFJLFNBQVMsR0FBRyxDQUFDLEVBQUUsU0FBUyxHQUFHLElBQUksRUFBRSxTQUFTLElBQUksaUJBQWlCLEVBQUU7WUFDeEUsVUFBVSxDQUFDLE1BQU0sQ0FBQyxlQUFlLENBQy9CLEtBQUssQ0FBQyxLQUFLLENBQUMsU0FBUyxFQUFFLFNBQVMsR0FBRyxpQkFBaUIsQ0FBQyxDQUN0RCxDQUFDO1NBQ0g7S0FDRjtTQUFNO1FBQ0wsVUFBVSxDQUFDLE1BQU0sQ0FBQyxlQUFlLENBQUMsS0FBSyxDQUFDLENBQUM7S0FDMUM7SUFFRCxPQUFPLEtBQUssQ0FBQztBQUNmLENBQUM7QUFVRCxNQUFNLENBQUMsT0FBTyxVQUFVLFdBQVcsQ0FDakMsSUFBWSxFQUNaLEVBQThDO0lBRTlDLElBQUksT0FBTyxFQUFFLEtBQUssVUFBVSxFQUFFO1FBQzVCLElBQUksR0FBRyxHQUFpQixJQUFJLEVBQUUsS0FBYSxDQUFDO1FBQzVDLElBQUk7WUFDRixLQUFLLEdBQUcsbUJBQW1CLENBQUMsSUFBSSxDQUFDLENBQUM7U0FDbkM7UUFBQyxPQUFPLENBQUMsRUFBRTtZQUdWLElBQ0UsQ0FBQyxZQUFZLFVBQVU7Z0JBQ3ZCLENBQUMsQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLHFDQUFxQyxDQUFDLEVBQ3pEO2dCQUNBLE1BQU0sQ0FBQyxDQUFDO2FBQ1Q7aUJBQU0sSUFBSSxDQUFDLFlBQVksS0FBSyxFQUFFO2dCQUM3QixHQUFHLEdBQUcsQ0FBQyxDQUFDO2FBQ1Q7aUJBQU07Z0JBQ0wsR0FBRyxHQUFHLElBQUksS0FBSyxDQUFDLG9CQUFvQixDQUFDLENBQUM7YUFDdkM7U0FDRjtRQUNELFVBQVUsQ0FBQyxHQUFHLEVBQUU7WUFDZCxJQUFJLEdBQUcsRUFBRTtnQkFDUCxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUM7YUFDVDtpQkFBTTtnQkFDTCxFQUFFLENBQUMsSUFBSSxFQUFFLEtBQUssQ0FBQyxDQUFDO2FBQ2pCO1FBQ0gsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0tBQ1A7U0FBTTtRQUNMLE9BQU8sbUJBQW1CLENBQUMsSUFBSSxDQUFDLENBQUM7S0FDbEM7QUFDSCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTgtMjAyMiB0aGUgRGVubyBhdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLiBNSVQgbGljZW5zZS5cbmltcG9ydCB7IEJ1ZmZlciB9IGZyb20gXCIuLi8uLi9idWZmZXIudHNcIjtcblxuZXhwb3J0IGNvbnN0IE1BWF9SQU5ET01fVkFMVUVTID0gNjU1MzY7XG5leHBvcnQgY29uc3QgTUFYX1NJWkUgPSA0Mjk0OTY3Mjk1O1xuXG5mdW5jdGlvbiBnZW5lcmF0ZVJhbmRvbUJ5dGVzKHNpemU6IG51bWJlcikge1xuICBpZiAoc2l6ZSA+IE1BWF9TSVpFKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoXG4gICAgICBgVGhlIHZhbHVlIG9mIFwic2l6ZVwiIGlzIG91dCBvZiByYW5nZS4gSXQgbXVzdCBiZSA+PSAwICYmIDw9ICR7TUFYX1NJWkV9LiBSZWNlaXZlZCAke3NpemV9YCxcbiAgICApO1xuICB9XG5cbiAgY29uc3QgYnl0ZXMgPSBCdWZmZXIuYWxsb2NVbnNhZmUoc2l6ZSk7XG5cbiAgLy9Xb3JrIGFyb3VuZCBmb3IgZ2V0UmFuZG9tVmFsdWVzIG1heCBnZW5lcmF0aW9uXG4gIGlmIChzaXplID4gTUFYX1JBTkRPTV9WQUxVRVMpIHtcbiAgICBmb3IgKGxldCBnZW5lcmF0ZWQgPSAwOyBnZW5lcmF0ZWQgPCBzaXplOyBnZW5lcmF0ZWQgKz0gTUFYX1JBTkRPTV9WQUxVRVMpIHtcbiAgICAgIGdsb2JhbFRoaXMuY3J5cHRvLmdldFJhbmRvbVZhbHVlcyhcbiAgICAgICAgYnl0ZXMuc2xpY2UoZ2VuZXJhdGVkLCBnZW5lcmF0ZWQgKyBNQVhfUkFORE9NX1ZBTFVFUyksXG4gICAgICApO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBnbG9iYWxUaGlzLmNyeXB0by5nZXRSYW5kb21WYWx1ZXMoYnl0ZXMpO1xuICB9XG5cbiAgcmV0dXJuIGJ5dGVzO1xufVxuXG4vKipcbiAqIEBwYXJhbSBzaXplIEJ1ZmZlciBsZW5ndGgsIG11c3QgYmUgZXF1YWwgb3IgZ3JlYXRlciB0aGFuIHplcm9cbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcmFuZG9tQnl0ZXMoc2l6ZTogbnVtYmVyKTogQnVmZmVyO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcmFuZG9tQnl0ZXMoXG4gIHNpemU6IG51bWJlcixcbiAgY2I/OiAoZXJyOiBFcnJvciB8IG51bGwsIGJ1Zj86IEJ1ZmZlcikgPT4gdm9pZCxcbik6IHZvaWQ7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiByYW5kb21CeXRlcyhcbiAgc2l6ZTogbnVtYmVyLFxuICBjYj86IChlcnI6IEVycm9yIHwgbnVsbCwgYnVmPzogQnVmZmVyKSA9PiB2b2lkLFxuKTogQnVmZmVyIHwgdm9pZCB7XG4gIGlmICh0eXBlb2YgY2IgPT09IFwiZnVuY3Rpb25cIikge1xuICAgIGxldCBlcnI6IEVycm9yIHwgbnVsbCA9IG51bGwsIGJ5dGVzOiBCdWZmZXI7XG4gICAgdHJ5IHtcbiAgICAgIGJ5dGVzID0gZ2VuZXJhdGVSYW5kb21CeXRlcyhzaXplKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAvL05vZGVKUyBub25zZW5zZVxuICAgICAgLy9JZiB0aGUgc2l6ZSBpcyBvdXQgb2YgcmFuZ2UgaXQgd2lsbCB0aHJvdyBzeW5jLCBvdGhlcndpc2UgdGhyb3cgYXN5bmNcbiAgICAgIGlmIChcbiAgICAgICAgZSBpbnN0YW5jZW9mIFJhbmdlRXJyb3IgJiZcbiAgICAgICAgZS5tZXNzYWdlLmluY2x1ZGVzKCdUaGUgdmFsdWUgb2YgXCJzaXplXCIgaXMgb3V0IG9mIHJhbmdlJylcbiAgICAgICkge1xuICAgICAgICB0aHJvdyBlO1xuICAgICAgfSBlbHNlIGlmIChlIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICAgICAgZXJyID0gZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGVyciA9IG5ldyBFcnJvcihcIltub24tZXJyb3IgdGhyb3duXVwiKTtcbiAgICAgIH1cbiAgICB9XG4gICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICBpZiAoZXJyKSB7XG4gICAgICAgIGNiKGVycik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjYihudWxsLCBieXRlcyk7XG4gICAgICB9XG4gICAgfSwgMCk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGdlbmVyYXRlUmFuZG9tQnl0ZXMoc2l6ZSk7XG4gIH1cbn1cbiJdfQ==