export default function randomInt(max, min, cb) {
    if (typeof max === "number" && typeof min === "number") {
        [max, min] = [min, max];
    }
    if (min === undefined)
        min = 0;
    else if (typeof min === "function") {
        cb = min;
        min = 0;
    }
    if (!Number.isSafeInteger(min) ||
        typeof max === "number" && !Number.isSafeInteger(max)) {
        throw new Error("max or min is not a Safe Number");
    }
    if (max - min > Math.pow(2, 48)) {
        throw new RangeError("max - min should be less than 2^48!");
    }
    if (min >= max) {
        throw new Error("Min is bigger than Max!");
    }
    const randomBuffer = new Uint32Array(1);
    globalThis.crypto.getRandomValues(randomBuffer);
    const randomNumber = randomBuffer[0] / (0xffffffff + 1);
    min = Math.ceil(min);
    max = Math.floor(max);
    const result = Math.floor(randomNumber * (max - min)) + min;
    if (cb) {
        cb(null, result);
        return;
    }
    return result;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX3JhbmRvbUludC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIl9yYW5kb21JbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBYUEsTUFBTSxDQUFDLE9BQU8sVUFBVSxTQUFTLENBQy9CLEdBQVcsRUFDWCxHQUF3RCxFQUN4RCxFQUE0QztJQUU1QyxJQUFJLE9BQU8sR0FBRyxLQUFLLFFBQVEsSUFBSSxPQUFPLEdBQUcsS0FBSyxRQUFRLEVBQUU7UUFDdEQsQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUM7S0FDekI7SUFDRCxJQUFJLEdBQUcsS0FBSyxTQUFTO1FBQUUsR0FBRyxHQUFHLENBQUMsQ0FBQztTQUMxQixJQUFJLE9BQU8sR0FBRyxLQUFLLFVBQVUsRUFBRTtRQUNsQyxFQUFFLEdBQUcsR0FBRyxDQUFDO1FBQ1QsR0FBRyxHQUFHLENBQUMsQ0FBQztLQUNUO0lBRUQsSUFDRSxDQUFDLE1BQU0sQ0FBQyxhQUFhLENBQUMsR0FBRyxDQUFDO1FBQzFCLE9BQU8sR0FBRyxLQUFLLFFBQVEsSUFBSSxDQUFDLE1BQU0sQ0FBQyxhQUFhLENBQUMsR0FBRyxDQUFDLEVBQ3JEO1FBQ0EsTUFBTSxJQUFJLEtBQUssQ0FBQyxpQ0FBaUMsQ0FBQyxDQUFDO0tBQ3BEO0lBRUQsSUFBSSxHQUFHLEdBQUcsR0FBRyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxFQUFFO1FBQy9CLE1BQU0sSUFBSSxVQUFVLENBQUMscUNBQXFDLENBQUMsQ0FBQztLQUM3RDtJQUVELElBQUksR0FBRyxJQUFJLEdBQUcsRUFBRTtRQUNkLE1BQU0sSUFBSSxLQUFLLENBQUMseUJBQXlCLENBQUMsQ0FBQztLQUM1QztJQUVELE1BQU0sWUFBWSxHQUFHLElBQUksV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRXhDLFVBQVUsQ0FBQyxNQUFNLENBQUMsZUFBZSxDQUFDLFlBQVksQ0FBQyxDQUFDO0lBRWhELE1BQU0sWUFBWSxHQUFHLFlBQVksQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLFVBQVUsR0FBRyxDQUFDLENBQUMsQ0FBQztJQUV4RCxHQUFHLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUNyQixHQUFHLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUV0QixNQUFNLE1BQU0sR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLFlBQVksR0FBRyxDQUFDLEdBQUcsR0FBRyxHQUFHLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQztJQUU1RCxJQUFJLEVBQUUsRUFBRTtRQUNOLEVBQUUsQ0FBQyxJQUFJLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFDakIsT0FBTztLQUNSO0lBRUQsT0FBTyxNQUFNLENBQUM7QUFDaEIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE4LTIwMjIgdGhlIERlbm8gYXV0aG9ycy4gQWxsIHJpZ2h0cyByZXNlcnZlZC4gTUlUIGxpY2Vuc2UuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiByYW5kb21JbnQobWF4OiBudW1iZXIpOiBudW1iZXI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiByYW5kb21JbnQobWluOiBudW1iZXIsIG1heDogbnVtYmVyKTogbnVtYmVyO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcmFuZG9tSW50KFxuICBtYXg6IG51bWJlcixcbiAgY2I6IChlcnI6IEVycm9yIHwgbnVsbCwgbj86IG51bWJlcikgPT4gdm9pZCxcbik6IHZvaWQ7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiByYW5kb21JbnQoXG4gIG1pbjogbnVtYmVyLFxuICBtYXg6IG51bWJlcixcbiAgY2I6IChlcnI6IEVycm9yIHwgbnVsbCwgbj86IG51bWJlcikgPT4gdm9pZCxcbik6IHZvaWQ7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHJhbmRvbUludChcbiAgbWF4OiBudW1iZXIsXG4gIG1pbj86ICgoZXJyOiBFcnJvciB8IG51bGwsIG4/OiBudW1iZXIpID0+IHZvaWQpIHwgbnVtYmVyLFxuICBjYj86IChlcnI6IEVycm9yIHwgbnVsbCwgbj86IG51bWJlcikgPT4gdm9pZCxcbik6IG51bWJlciB8IHZvaWQge1xuICBpZiAodHlwZW9mIG1heCA9PT0gXCJudW1iZXJcIiAmJiB0eXBlb2YgbWluID09PSBcIm51bWJlclwiKSB7XG4gICAgW21heCwgbWluXSA9IFttaW4sIG1heF07XG4gIH1cbiAgaWYgKG1pbiA9PT0gdW5kZWZpbmVkKSBtaW4gPSAwO1xuICBlbHNlIGlmICh0eXBlb2YgbWluID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICBjYiA9IG1pbjtcbiAgICBtaW4gPSAwO1xuICB9XG5cbiAgaWYgKFxuICAgICFOdW1iZXIuaXNTYWZlSW50ZWdlcihtaW4pIHx8XG4gICAgdHlwZW9mIG1heCA9PT0gXCJudW1iZXJcIiAmJiAhTnVtYmVyLmlzU2FmZUludGVnZXIobWF4KVxuICApIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJtYXggb3IgbWluIGlzIG5vdCBhIFNhZmUgTnVtYmVyXCIpO1xuICB9XG5cbiAgaWYgKG1heCAtIG1pbiA+IE1hdGgucG93KDIsIDQ4KSkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKFwibWF4IC0gbWluIHNob3VsZCBiZSBsZXNzIHRoYW4gMl40OCFcIik7XG4gIH1cblxuICBpZiAobWluID49IG1heCkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIk1pbiBpcyBiaWdnZXIgdGhhbiBNYXghXCIpO1xuICB9XG5cbiAgY29uc3QgcmFuZG9tQnVmZmVyID0gbmV3IFVpbnQzMkFycmF5KDEpO1xuXG4gIGdsb2JhbFRoaXMuY3J5cHRvLmdldFJhbmRvbVZhbHVlcyhyYW5kb21CdWZmZXIpO1xuXG4gIGNvbnN0IHJhbmRvbU51bWJlciA9IHJhbmRvbUJ1ZmZlclswXSAvICgweGZmZmZmZmZmICsgMSk7XG5cbiAgbWluID0gTWF0aC5jZWlsKG1pbik7XG4gIG1heCA9IE1hdGguZmxvb3IobWF4KTtcblxuICBjb25zdCByZXN1bHQgPSBNYXRoLmZsb29yKHJhbmRvbU51bWJlciAqIChtYXggLSBtaW4pKSArIG1pbjtcblxuICBpZiAoY2IpIHtcbiAgICBjYihudWxsLCByZXN1bHQpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHJldHVybiByZXN1bHQ7XG59XG4iXX0=