import { core } from "./_core.ts";
import { validateFunction } from "./internal/validators.mjs";
import { _exiting } from "./_process/exiting.ts";
import { FixedQueue } from "./internal/fixed_queue.ts";
const queue = new FixedQueue();
let _nextTick;
export function processTicksAndRejections() {
    let tock;
    do {
        while (tock = queue.shift()) {
            try {
                const callback = tock.callback;
                if (tock.args === undefined) {
                    callback();
                }
                else {
                    const args = tock.args;
                    switch (args.length) {
                        case 1:
                            callback(args[0]);
                            break;
                        case 2:
                            callback(args[0], args[1]);
                            break;
                        case 3:
                            callback(args[0], args[1], args[2]);
                            break;
                        case 4:
                            callback(args[0], args[1], args[2], args[3]);
                            break;
                        default:
                            callback(...args);
                    }
                }
            }
            finally {
            }
        }
        core.runMicrotasks();
    } while (!queue.isEmpty());
    core.setHasTickScheduled(false);
}
if (typeof core.setNextTickCallback !== "undefined") {
    function runNextTicks() {
        if (!core.hasTickScheduled()) {
            core.runMicrotasks();
        }
        if (!core.hasTickScheduled()) {
            return true;
        }
        processTicksAndRejections();
        return true;
    }
    core.setNextTickCallback(processTicksAndRejections);
    core.setMacrotaskCallback(runNextTicks);
    function __nextTickNative(callback, ...args) {
        validateFunction(callback, "callback");
        if (_exiting) {
            return;
        }
        let args_;
        switch (args.length) {
            case 0:
                break;
            case 1:
                args_ = [args[0]];
                break;
            case 2:
                args_ = [args[0], args[1]];
                break;
            case 3:
                args_ = [args[0], args[1], args[2]];
                break;
            default:
                args_ = new Array(args.length);
                for (let i = 0; i < args.length; i++) {
                    args_[i] = args[i];
                }
        }
        if (queue.isEmpty()) {
            core.setHasTickScheduled(true);
        }
        const tickObject = {
            callback,
            args: args_,
        };
        queue.push(tickObject);
    }
    _nextTick = __nextTickNative;
}
else {
    function __nextTickQueueMicrotask(callback, ...args) {
        if (args) {
            queueMicrotask(() => callback.call(this, ...args));
        }
        else {
            queueMicrotask(callback);
        }
    }
    _nextTick = __nextTickQueueMicrotask;
}
export function nextTick(callback, ...args) {
    _nextTick(callback, ...args);
}
//# sourceMappingURL=data:application/json;base64,