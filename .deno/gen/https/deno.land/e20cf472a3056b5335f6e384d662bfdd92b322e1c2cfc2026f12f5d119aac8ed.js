const kSize = 2048;
const kMask = kSize - 1;
class FixedCircularBuffer {
    bottom;
    top;
    list;
    next;
    constructor() {
        this.bottom = 0;
        this.top = 0;
        this.list = new Array(kSize);
        this.next = null;
    }
    isEmpty() {
        return this.top === this.bottom;
    }
    isFull() {
        return ((this.top + 1) & kMask) === this.bottom;
    }
    push(data) {
        this.list[this.top] = data;
        this.top = (this.top + 1) & kMask;
    }
    shift() {
        const nextItem = this.list[this.bottom];
        if (nextItem === undefined) {
            return null;
        }
        this.list[this.bottom] = undefined;
        this.bottom = (this.bottom + 1) & kMask;
        return nextItem;
    }
}
export class FixedQueue {
    head;
    tail;
    constructor() {
        this.head = this.tail = new FixedCircularBuffer();
    }
    isEmpty() {
        return this.head.isEmpty();
    }
    push(data) {
        if (this.head.isFull()) {
            this.head = this.head.next = new FixedCircularBuffer();
        }
        this.head.push(data);
    }
    shift() {
        const tail = this.tail;
        const next = tail.shift();
        if (tail.isEmpty() && tail.next !== null) {
            this.tail = tail.next;
        }
        return next;
    }
}
//# sourceMappingURL=data:application/json;base64,