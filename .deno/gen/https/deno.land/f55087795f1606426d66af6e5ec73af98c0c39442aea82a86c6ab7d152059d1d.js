import { isWindows } from "../../_util/os.ts";
import { nextTick as _nextTick } from "../_next_tick.ts";
function _arch() {
    if (Deno.build.arch == "x86_64") {
        return "x64";
    }
    else if (Deno.build.arch == "aarch64") {
        return "arm64";
    }
    else {
        throw Error("unreachable");
    }
}
export const arch = _arch();
export const chdir = Deno.chdir;
export const cwd = Deno.cwd;
export const nextTick = _nextTick;
function denoEnvGet(name) {
    try {
        return Deno.env.get(name);
    }
    catch (e) {
        if (e instanceof TypeError) {
            return undefined;
        }
        throw e;
    }
}
const OBJECT_PROTO_PROP_NAMES = Object.getOwnPropertyNames(Object.prototype);
export const env = new Proxy(Object(), {
    get: (target, prop) => {
        if (typeof prop === "symbol") {
            return target[prop];
        }
        const envValue = denoEnvGet(prop);
        if (envValue) {
            return envValue;
        }
        if (OBJECT_PROTO_PROP_NAMES.includes(prop)) {
            return target[prop];
        }
        return envValue;
    },
    ownKeys: () => Reflect.ownKeys(Deno.env.toObject()),
    getOwnPropertyDescriptor: (_target, name) => {
        const value = denoEnvGet(String(name));
        if (value) {
            return {
                enumerable: true,
                configurable: true,
                value,
            };
        }
    },
    set(_target, prop, value) {
        Deno.env.set(String(prop), String(value));
        return true;
    },
    has: (_target, prop) => typeof denoEnvGet(String(prop)) === "string",
});
export const pid = Deno.pid;
export const platform = isWindows ? "win32" : Deno.build.os;
export const version = "v16.17.0";
export const versions = {
    node: "16.17.0",
    uv: "1.43.0",
    zlib: "1.2.11",
    brotli: "1.0.9",
    ares: "1.18.1",
    modules: "93",
    nghttp2: "1.47.0",
    napi: "8",
    llhttp: "6.0.7",
    openssl: "1.1.1q+quic",
    cldr: "41.0",
    icu: "71.1",
    tz: "2022a",
    unicode: "14.0",
    ...Deno.version,
};
//# sourceMappingURL=data:application/json;base64,