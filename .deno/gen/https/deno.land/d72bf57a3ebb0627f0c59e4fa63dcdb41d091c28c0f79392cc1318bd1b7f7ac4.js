import randomBytes, { MAX_SIZE as kMaxUint32 } from "./_randomBytes.ts";
const kBufferMaxLength = 0x7fffffff;
function assertOffset(offset, length) {
    if (offset > kMaxUint32 || offset < 0) {
        throw new TypeError("offset must be a uint32");
    }
    if (offset > kBufferMaxLength || offset > length) {
        throw new RangeError("offset out of range");
    }
}
function assertSize(size, offset, length) {
    if (size > kMaxUint32 || size < 0) {
        throw new TypeError("size must be a uint32");
    }
    if (size + offset > length || size > kBufferMaxLength) {
        throw new RangeError("buffer too small");
    }
}
export default function randomFill(buf, offset, size, cb) {
    if (typeof offset === "function") {
        cb = offset;
        offset = 0;
        size = buf.length;
    }
    else if (typeof size === "function") {
        cb = size;
        size = buf.length - Number(offset);
    }
    assertOffset(offset, buf.length);
    assertSize(size, offset, buf.length);
    randomBytes(size, (err, bytes) => {
        if (err)
            return cb(err, buf);
        bytes?.copy(buf, offset);
        cb(null, buf);
    });
}
export function randomFillSync(buf, offset = 0, size) {
    assertOffset(offset, buf.length);
    if (size === undefined)
        size = buf.length - offset;
    assertSize(size, offset, buf.length);
    const bytes = randomBytes(size);
    bytes.copy(buf, offset);
    return buf;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX3JhbmRvbUZpbGwuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJfcmFuZG9tRmlsbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLFdBQVcsRUFBRSxFQUFFLFFBQVEsSUFBSSxVQUFVLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUd4RSxNQUFNLGdCQUFnQixHQUFHLFVBQVUsQ0FBQztBQUVwQyxTQUFTLFlBQVksQ0FBQyxNQUFjLEVBQUUsTUFBYztJQUNsRCxJQUFJLE1BQU0sR0FBRyxVQUFVLElBQUksTUFBTSxHQUFHLENBQUMsRUFBRTtRQUNyQyxNQUFNLElBQUksU0FBUyxDQUFDLHlCQUF5QixDQUFDLENBQUM7S0FDaEQ7SUFFRCxJQUFJLE1BQU0sR0FBRyxnQkFBZ0IsSUFBSSxNQUFNLEdBQUcsTUFBTSxFQUFFO1FBQ2hELE1BQU0sSUFBSSxVQUFVLENBQUMscUJBQXFCLENBQUMsQ0FBQztLQUM3QztBQUNILENBQUM7QUFFRCxTQUFTLFVBQVUsQ0FBQyxJQUFZLEVBQUUsTUFBYyxFQUFFLE1BQWM7SUFDOUQsSUFBSSxJQUFJLEdBQUcsVUFBVSxJQUFJLElBQUksR0FBRyxDQUFDLEVBQUU7UUFDakMsTUFBTSxJQUFJLFNBQVMsQ0FBQyx1QkFBdUIsQ0FBQyxDQUFDO0tBQzlDO0lBRUQsSUFBSSxJQUFJLEdBQUcsTUFBTSxHQUFHLE1BQU0sSUFBSSxJQUFJLEdBQUcsZ0JBQWdCLEVBQUU7UUFDckQsTUFBTSxJQUFJLFVBQVUsQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO0tBQzFDO0FBQ0gsQ0FBQztBQW9CRCxNQUFNLENBQUMsT0FBTyxVQUFVLFVBQVUsQ0FDaEMsR0FBVyxFQUNYLE1BQTRELEVBQzVELElBQTBELEVBQzFELEVBQTZDO0lBRTdDLElBQUksT0FBTyxNQUFNLEtBQUssVUFBVSxFQUFFO1FBQ2hDLEVBQUUsR0FBRyxNQUFNLENBQUM7UUFDWixNQUFNLEdBQUcsQ0FBQyxDQUFDO1FBQ1gsSUFBSSxHQUFHLEdBQUcsQ0FBQyxNQUFNLENBQUM7S0FDbkI7U0FBTSxJQUFJLE9BQU8sSUFBSSxLQUFLLFVBQVUsRUFBRTtRQUNyQyxFQUFFLEdBQUcsSUFBSSxDQUFDO1FBQ1YsSUFBSSxHQUFHLEdBQUcsQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDLE1BQWdCLENBQUMsQ0FBQztLQUM5QztJQUVELFlBQVksQ0FBQyxNQUFnQixFQUFFLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUMzQyxVQUFVLENBQUMsSUFBYyxFQUFFLE1BQWdCLEVBQUUsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBRXpELFdBQVcsQ0FBQyxJQUFjLEVBQUUsQ0FBQyxHQUFHLEVBQUUsS0FBSyxFQUFFLEVBQUU7UUFDekMsSUFBSSxHQUFHO1lBQUUsT0FBTyxFQUFHLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFDO1FBQzlCLEtBQUssRUFBRSxJQUFJLENBQUMsR0FBRyxFQUFFLE1BQWdCLENBQUMsQ0FBQztRQUNuQyxFQUFHLENBQUMsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQ2pCLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQztBQUVELE1BQU0sVUFBVSxjQUFjLENBQUMsR0FBVyxFQUFFLE1BQU0sR0FBRyxDQUFDLEVBQUUsSUFBYTtJQUNuRSxZQUFZLENBQUMsTUFBTSxFQUFFLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqQyxJQUFJLElBQUksS0FBSyxTQUFTO1FBQUUsSUFBSSxHQUFHLEdBQUcsQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDO0lBRW5ELFVBQVUsQ0FBQyxJQUFJLEVBQUUsTUFBTSxFQUFFLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVyQyxNQUFNLEtBQUssR0FBRyxXQUFXLENBQUMsSUFBSSxDQUFDLENBQUM7SUFFaEMsS0FBSyxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsTUFBTSxDQUFDLENBQUM7SUFFeEIsT0FBTyxHQUFHLENBQUM7QUFDYixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTgtMjAyMiB0aGUgRGVubyBhdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLiBNSVQgbGljZW5zZS5cbmltcG9ydCByYW5kb21CeXRlcywgeyBNQVhfU0laRSBhcyBrTWF4VWludDMyIH0gZnJvbSBcIi4vX3JhbmRvbUJ5dGVzLnRzXCI7XG5pbXBvcnQgeyBCdWZmZXIgfSBmcm9tIFwiLi4vLi4vYnVmZmVyLnRzXCI7XG5cbmNvbnN0IGtCdWZmZXJNYXhMZW5ndGggPSAweDdmZmZmZmZmO1xuXG5mdW5jdGlvbiBhc3NlcnRPZmZzZXQob2Zmc2V0OiBudW1iZXIsIGxlbmd0aDogbnVtYmVyKSB7XG4gIGlmIChvZmZzZXQgPiBrTWF4VWludDMyIHx8IG9mZnNldCA8IDApIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwib2Zmc2V0IG11c3QgYmUgYSB1aW50MzJcIik7XG4gIH1cblxuICBpZiAob2Zmc2V0ID4ga0J1ZmZlck1heExlbmd0aCB8fCBvZmZzZXQgPiBsZW5ndGgpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcihcIm9mZnNldCBvdXQgb2YgcmFuZ2VcIik7XG4gIH1cbn1cblxuZnVuY3Rpb24gYXNzZXJ0U2l6ZShzaXplOiBudW1iZXIsIG9mZnNldDogbnVtYmVyLCBsZW5ndGg6IG51bWJlcikge1xuICBpZiAoc2l6ZSA+IGtNYXhVaW50MzIgfHwgc2l6ZSA8IDApIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwic2l6ZSBtdXN0IGJlIGEgdWludDMyXCIpO1xuICB9XG5cbiAgaWYgKHNpemUgKyBvZmZzZXQgPiBsZW5ndGggfHwgc2l6ZSA+IGtCdWZmZXJNYXhMZW5ndGgpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcihcImJ1ZmZlciB0b28gc21hbGxcIik7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcmFuZG9tRmlsbChcbiAgYnVmOiBCdWZmZXIsXG4gIGNiOiAoZXJyOiBFcnJvciB8IG51bGwsIGJ1ZjogQnVmZmVyKSA9PiB2b2lkLFxuKTogdm9pZDtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcmFuZG9tRmlsbChcbiAgYnVmOiBCdWZmZXIsXG4gIG9mZnNldDogbnVtYmVyLFxuICBjYjogKGVycjogRXJyb3IgfCBudWxsLCBidWY6IEJ1ZmZlcikgPT4gdm9pZCxcbik6IHZvaWQ7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHJhbmRvbUZpbGwoXG4gIGJ1ZjogQnVmZmVyLFxuICBvZmZzZXQ6IG51bWJlcixcbiAgc2l6ZTogbnVtYmVyLFxuICBjYjogKGVycjogRXJyb3IgfCBudWxsLCBidWY6IEJ1ZmZlcikgPT4gdm9pZCxcbik6IHZvaWQ7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHJhbmRvbUZpbGwoXG4gIGJ1ZjogQnVmZmVyLFxuICBvZmZzZXQ/OiBudW1iZXIgfCAoKGVycjogRXJyb3IgfCBudWxsLCBidWY6IEJ1ZmZlcikgPT4gdm9pZCksXG4gIHNpemU/OiBudW1iZXIgfCAoKGVycjogRXJyb3IgfCBudWxsLCBidWY6IEJ1ZmZlcikgPT4gdm9pZCksXG4gIGNiPzogKGVycjogRXJyb3IgfCBudWxsLCBidWY6IEJ1ZmZlcikgPT4gdm9pZCxcbikge1xuICBpZiAodHlwZW9mIG9mZnNldCA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgY2IgPSBvZmZzZXQ7XG4gICAgb2Zmc2V0ID0gMDtcbiAgICBzaXplID0gYnVmLmxlbmd0aDtcbiAgfSBlbHNlIGlmICh0eXBlb2Ygc2l6ZSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgY2IgPSBzaXplO1xuICAgIHNpemUgPSBidWYubGVuZ3RoIC0gTnVtYmVyKG9mZnNldCBhcyBudW1iZXIpO1xuICB9XG5cbiAgYXNzZXJ0T2Zmc2V0KG9mZnNldCBhcyBudW1iZXIsIGJ1Zi5sZW5ndGgpO1xuICBhc3NlcnRTaXplKHNpemUgYXMgbnVtYmVyLCBvZmZzZXQgYXMgbnVtYmVyLCBidWYubGVuZ3RoKTtcblxuICByYW5kb21CeXRlcyhzaXplIGFzIG51bWJlciwgKGVyciwgYnl0ZXMpID0+IHtcbiAgICBpZiAoZXJyKSByZXR1cm4gY2IhKGVyciwgYnVmKTtcbiAgICBieXRlcz8uY29weShidWYsIG9mZnNldCBhcyBudW1iZXIpO1xuICAgIGNiIShudWxsLCBidWYpO1xuICB9KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJhbmRvbUZpbGxTeW5jKGJ1ZjogQnVmZmVyLCBvZmZzZXQgPSAwLCBzaXplPzogbnVtYmVyKSB7XG4gIGFzc2VydE9mZnNldChvZmZzZXQsIGJ1Zi5sZW5ndGgpO1xuXG4gIGlmIChzaXplID09PSB1bmRlZmluZWQpIHNpemUgPSBidWYubGVuZ3RoIC0gb2Zmc2V0O1xuXG4gIGFzc2VydFNpemUoc2l6ZSwgb2Zmc2V0LCBidWYubGVuZ3RoKTtcblxuICBjb25zdCBieXRlcyA9IHJhbmRvbUJ5dGVzKHNpemUpO1xuXG4gIGJ5dGVzLmNvcHkoYnVmLCBvZmZzZXQpO1xuXG4gIHJldHVybiBidWY7XG59XG4iXX0=