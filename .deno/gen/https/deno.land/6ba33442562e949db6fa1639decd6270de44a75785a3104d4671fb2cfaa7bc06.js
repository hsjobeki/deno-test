import { kHandle } from "./constants.ts";
import { ERR_INVALID_ARG_TYPE, ERR_INVALID_ARG_VALUE } from "../errors.ts";
import { notImplemented } from "../../_utils.ts";
import { isCryptoKey, isKeyObject, kKeyType } from "./_keys.ts";
export { isCryptoKey, isKeyObject };
export class KeyObject {
    [kKeyType];
    [kHandle];
    constructor(type, handle) {
        if (type !== "secret" && type !== "public" && type !== "private") {
            throw new ERR_INVALID_ARG_VALUE("type", type);
        }
        if (typeof handle !== "object") {
            throw new ERR_INVALID_ARG_TYPE("handle", "object", handle);
        }
        this[kKeyType] = type;
        Object.defineProperty(this, kHandle, {
            value: handle,
            enumerable: false,
            configurable: false,
            writable: false,
        });
    }
    get type() {
        return this[kKeyType];
    }
    get asymmetricKeyDetails() {
        notImplemented("crypto.KeyObject.prototype.asymmetricKeyDetails");
        return undefined;
    }
    get asymmetricKeyType() {
        notImplemented("crypto.KeyObject.prototype.asymmetricKeyType");
        return undefined;
    }
    get symmetricKeySize() {
        notImplemented("crypto.KeyObject.prototype.symmetricKeySize");
        return undefined;
    }
    static from(key) {
        if (!isCryptoKey(key)) {
            throw new ERR_INVALID_ARG_TYPE("key", "CryptoKey", key);
        }
        notImplemented("crypto.KeyObject.prototype.from");
    }
    equals(otherKeyObject) {
        if (!isKeyObject(otherKeyObject)) {
            throw new ERR_INVALID_ARG_TYPE("otherKeyObject", "KeyObject", otherKeyObject);
        }
        notImplemented("crypto.KeyObject.prototype.equals");
    }
    export(_options) {
        notImplemented("crypto.KeyObject.prototype.asymmetricKeyType");
    }
}
export function createPrivateKey(_key) {
    notImplemented("crypto.createPrivateKey");
}
export function createPublicKey(_key) {
    notImplemented("crypto.createPublicKey");
}
export function createSecretKey(_key, _encoding) {
    notImplemented("crypto.createSecretKey");
}
export default {
    isKeyObject,
    isCryptoKey,
    KeyObject,
    createPrivateKey,
    createPublicKey,
    createSecretKey,
};
//# sourceMappingURL=data:application/json;base64,