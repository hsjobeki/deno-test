import { instantiateWasm, } from "../../../crypto/_wasm_crypto/mod.ts";
import { Buffer } from "../../buffer.ts";
import { Transform } from "../../stream.ts";
import { encode as encodeToHex } from "../../../encoding/hex.ts";
import { encode as encodeToBase64 } from "../../../encoding/base64.ts";
import { encode as encodeToBase64Url } from "../../../encoding/base64url.ts";
import { validateString } from "../validators.mjs";
import { notImplemented } from "../../_utils.ts";
const coerceToBytes = (data) => {
    if (data instanceof Uint8Array) {
        return data;
    }
    else if (typeof data === "string") {
        return new TextEncoder().encode(data);
    }
    else if (ArrayBuffer.isView(data)) {
        return new Uint8Array(data.buffer, data.byteOffset, data.byteLength);
    }
    else if (data instanceof ArrayBuffer) {
        return new Uint8Array(data);
    }
    else {
        throw new TypeError("expected data to be string | BufferSource");
    }
};
export class Hash extends Transform {
    #context;
    constructor(algorithm, _opts) {
        super({
            transform(chunk, _encoding, callback) {
                context.update(coerceToBytes(chunk));
                callback();
            },
            flush(callback) {
                this.push(context.digest(undefined));
                callback();
            },
        });
        if (typeof algorithm === "string") {
            algorithm = algorithm.toUpperCase();
            if (opensslToWebCryptoDigestNames[algorithm]) {
                algorithm = opensslToWebCryptoDigestNames[algorithm];
            }
            this.#context = new (instantiateWasm().DigestContext)(algorithm);
        }
        else {
            this.#context = algorithm;
        }
        const context = this.#context;
    }
    copy() {
        return new Hash(this.#context.clone());
    }
    update(data, _encoding) {
        let bytes;
        if (typeof data === "string") {
            data = new TextEncoder().encode(data);
            bytes = coerceToBytes(data);
        }
        else {
            bytes = coerceToBytes(data);
        }
        this.#context.update(bytes);
        return this;
    }
    digest(encoding) {
        const digest = this.#context.digest(undefined);
        if (encoding === undefined) {
            return Buffer.from(digest);
        }
        switch (encoding) {
            case "hex":
                return new TextDecoder().decode(encodeToHex(new Uint8Array(digest)));
            case "binary":
                return String.fromCharCode(...digest);
            case "base64":
                return encodeToBase64(digest);
            case "base64url":
                return encodeToBase64Url(digest);
            default:
                throw new Error(`The output encoding for hash digest is not implemented: ${encoding}`);
        }
    }
}
export class Hmac extends Transform {
    constructor(hmac, _key, _options) {
        validateString(hmac, "hmac");
        super();
        notImplemented("crypto.Hmac");
    }
    digest(_encoding) {
        notImplemented("crypto.Hmac.prototype.digest");
    }
    update(_data, _inputEncoding) {
        notImplemented("crypto.Hmac.prototype.update");
    }
}
const opensslToWebCryptoDigestNames = {
    BLAKE2B512: "BLAKE2B",
    BLAKE2S256: "BLAKE2S",
    RIPEMD160: "RIPEMD-160",
    RMD160: "RIPEMD-160",
    SHA1: "SHA-1",
    SHA224: "SHA-224",
    SHA256: "SHA-256",
    SHA384: "SHA-384",
    SHA512: "SHA-512",
};
export function createHash(algorithm, opts) {
    return new Hash(algorithm, opts);
}
export default {
    Hash,
    Hmac,
    createHash,
};
//# sourceMappingURL=data:application/json;base64,